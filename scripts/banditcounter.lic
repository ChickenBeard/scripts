module Bandit
  extend self

  module DialogDataCounter
    extend self

    BANDIT_NOUN_REGEX = /bandit|brigand|robber|thug|thief|rogue|outlaw|mugger|marauder|highwayman/

    attr_writer :bandits
    attr_accessor :room

    def bandits
      if room == Room.current.id
        @bandits
      else
        []
      end
    end

    def count
      bandits.count
    end

    def any?
      bandits.any?
    end

    def hook
      proc do |line|
        line.tap do |line| # this hook is read-only. always return the original line.
          if line =~ /<dialogData id='combat'>.*content_text="(.*)" content_value=.*<\/dialogData>/
            self.room = Room.current.id
            self.bandits = $1.split(',').select { |m| m =~ BANDIT_NOUN_REGEX }
          end
        end
      end
    end

    def reset
      self.bandits = []
    end

    def register_bandit_monitor
      before_dying do
        Bandit::DialogDataCounter.reset
        DownstreamHook.remove('bandit_counter')
      end

      self.reset
      DownstreamHook.add('bandit_counter', hook)
    end
  end

  def count
    [DialogDataCounter.count, gameobj.count].max
  end

  def reset
    DialogDataCounter.reset
  end

  def gameobj
    GameObj.npcs.select do |npc|
      npc.type.include?("bandit")
    end || [] # GameObj.npcs in nil when none are present because lich
  end

  def hidden
    DialogDataCounter.bandits - (gameobj.map(&:noun) + gameobj.map(&:name))
  end

  def hidden?
    hidden.any?
  end

  def any?
    count > 0
  end

  def notification_loop
    loop do
      wait_until { self.any? }
      echo "detected #{Bandit.count} bandits"

      wait_while { self.any? }
      echo "cleared"
    end
  end

  def run
    DialogDataCounter.register_bandit_monitor

    notification_loop
  end
end

if defined? Lich
  Bandit.run
end
